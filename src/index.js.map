{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as assert from 'assert'\nimport * as crypto from 'crypto'\nimport * as Debug from 'debug'\nimport * as WebSocket from 'ws'\nimport { WebSocketReconnector } from './ws-reconnect'\nimport { PluginV2, DataHandler, MoneyHandler } from 'ilp-compat-plugin'\nimport { EventEmitter2, Listener } from 'eventemitter2'\nimport { URL } from 'url'\nimport { protocolDataToIlpAndCustom, ilpAndCustomToProtocolData } from './protocol-data-converter'\n\nconst BtpPacket = require('btp-packet')\n\nconst debug = Debug('ilp-plugin-btp')\n\nconst DEFAULT_TIMEOUT = 35000\nconst namesToCodes = {\n  'UnreachableError': 'T00',\n  'NotAcceptedError': 'F00',\n  'InvalidFieldsError': 'F01',\n  'TransferNotFoundError': 'F02',\n  'InvalidFulfillmentError': 'F03',\n  'DuplicateIdError': 'F04',\n  'AlreadyRolledBackError': 'F05',\n  'AlreadyFulfilledError': 'F06',\n  'InsufficientBalanceError': 'F07'\n}\n\nfunction jsErrorToBtpError (e: Error) {\n  const name: string = e.name || 'NotAcceptedError'\n  const code: string = namesToCodes[name] || 'F00'\n\n  return {\n    code,\n    name,\n    triggeredAt: new Date(),\n    data: JSON.stringify({ message: e.message })\n  }\n}\n\nnamespace BtpConstants {\n  export const TYPE_RESPONSE = 1\n  export const TYPE_ERROR = 2\n  export const TYPE_MESSAGE = 6\n  export const TYPE_TRANSFER = 7\n  export const MIME_APPLICATION_OCTET_STREAM = 0\n  export const MIME_TEXT_PLAIN_UTF8 = 1\n  export const MIME_APPLICATION_JSON = 2\n}\n\nexport interface BtpPacket {\n  requestId: number\n  type: number\n  data: BtpPacketData\n}\n\nexport interface BtpPacketData {\n  protocolData: Array<BtpSubProtocol>\n  amount?: string\n  code?: string\n  name?: string\n  triggeredAt?: Date\n  data?: string\n}\n\nexport interface BtpSubProtocol {\n  protocolName: string\n  contentType: number\n  data: Buffer\n}\n\nexport interface IlpPluginBtpConstructorOptions {\n  server?: string,\n  listener?: {\n    port: number,\n    secret: string\n  },\n  reconnectInterval?: number\n}\n\nexport interface ConnectDisconnectHandler {\n  (): Promise<void>\n}\n\n/** Abstract base class for building BTP-based ledger plugins.\n *\n * This class takes care of most of the work translating between BTP and the\n * ledger plugin interface (LPI).\n *\n * You need to implement:\n *\n * sendMoney (amount), handleMoney (from, btpPacket)\n *\n * The `from` field is set to null in all the methods here. It is present in\n * order to make it possible to write multi account plugins (plugins with an\n * internal connector which understand ILP).\n *\n * If any work must be done on disconnect, implement _disconnect instead of\n * overriding this.disconnect. This will ensure that the connection is cleaned\n * up properly.\n *\n * If any work must be done on connect, implement _connect. You can also\n * rewrite connect, but then disconnect and handleOutgoingBtpPacket should also\n * be overridden.\n *\n * Instead, you need to implement _handleOutgoingBtpPacket(to, btpPacket) which\n * returns a Promise. `to` is the ILP address of the destination peer and\n * `btpPacket` is the BTP packet as a JavaScript object.\n *\n * You can call _handleIncomingBtpPacket(from, btpPacket) to trigger all the\n * necessary LPI events in response to an incoming BTP packet. `from` is the\n * ILP address of the peer and `btpPacket` is the parsed BTP packet.\n */\n\nexport default class AbstractBtpPlugin extends EventEmitter2 {\n\n  public version = 2\n\n  protected _connect: ConnectDisconnectHandler\n  protected _disconnect: ConnectDisconnectHandler\n\n  private _reconnectInterval?: number\n\n  private _dataHandler?: DataHandler\n  private _moneyHandler?: MoneyHandler\n  private _connected: boolean\n\n  // Server\n  private _listener?: {\n    port: number,\n    secret: string\n  }\n  private _wss: WebSocket.Server\n  private _incomingWs?: WebSocket\n\n  // Client\n  private _server?: string\n  private _ws?: WebSocketReconnector\n\n  constructor (options: IlpPluginBtpConstructorOptions) {\n    super()\n\n    this._reconnectInterval = options.reconnectInterval // optional\n    this._connected = false\n    this._listener = options.listener\n    this._server = options.server\n  }\n  async connect () {\n    if (this._connected) {\n      return\n    }\n\n    if (this._listener) {\n      const wss = this._wss = new WebSocket.Server({ port: this._listener.port })\n      this._incomingWs = undefined\n\n      wss.on('connection', (socket: WebSocket) => {\n        debug('got connection')\n        let authPacket: BtpPacket\n        let token: string\n\n        socket.on('close', (code: number) => {\n          debug('incoming websocket closed. code=' + code)\n        })\n\n        socket.on('error', (err: Error) => {\n          debug('incoming websocket error. error=', err)\n        })\n\n        socket.once('message', async (data: WebSocket.Data) => {\n          try {\n            authPacket = BtpPacket.deserialize(data)\n\n            debug('got auth packet. packet=%j', authPacket)\n\n            assert(authPacket.type === BtpPacket.TYPE_MESSAGE, 'First message sent over BTP connection must be auth packet')\n            assert(authPacket.data.protocolData.length >= 2, 'Auth packet must have auth and auth_token subprotocols')\n            assert(authPacket.data.protocolData[0].protocolName === 'auth', 'First subprotocol must be auth')\n\n            for (let subProtocol of authPacket.data.protocolData) {\n              if (subProtocol.protocolName === 'auth_token') {\n                token = subProtocol.data.toString()\n                if (token !== this._listener!.secret) {\n                  debug(JSON.stringify(token), JSON.stringify(this._listener!.secret))\n                  throw new Error('invalid auth_token')\n                }\n\n                if (this._incomingWs) {\n                  this._closeIncomingSocket(this._incomingWs)\n                }\n\n                this._incomingWs = socket\n              }\n            }\n\n            assert(token, 'auth_token subprotocol is required')\n            socket.send(BtpPacket.serializeResponse(authPacket.requestId, []))\n\n          } catch (err) {\n\n            this._incomingWs = undefined\n            if (authPacket) {\n              const errorResponse = BtpPacket.serializeError({\n                code: 'F00',\n                name: 'NotAcceptedError',\n                data: err.message,\n                triggeredAt: new Date().toISOString()\n              }, authPacket.requestId, [])\n              socket.send(errorResponse)\n            }\n            socket.close()\n            return\n          }\n\n          debug('connection authenticated')\n          socket.on('message', this._handleIncomingWsMessage.bind(this, socket))\n          this.emit('_connect')\n        })\n      })\n    }\n\n    if (this._server) {\n      const parsedBtpUri = new URL(this._server)\n      const account = parsedBtpUri.username\n      const token = parsedBtpUri.password\n\n      if (!parsedBtpUri.protocol.startsWith('btp+')) {\n        throw new Error('server must start with \"btp+\". server=' + this._server)\n      }\n\n      this._ws = new WebSocketReconnector({ interval: this._reconnectInterval })\n\n      const protocolData = [{\n        protocolName: 'auth',\n        contentType: BtpPacket.MIME_APPLICATION_OCTET_STREAM,\n        data: Buffer.from([])\n      }, {\n        protocolName: 'auth_username',\n        contentType: BtpPacket.MIME_TEXT_PLAIN_UTF8,\n        data: Buffer.from(account, 'utf8')\n      }, {\n        protocolName: 'auth_token',\n        contentType: BtpPacket.MIME_TEXT_PLAIN_UTF8,\n        data: Buffer.from(token, 'utf8')\n      }]\n\n      this._ws.on('open', async () => {\n        debug('connected to server')\n        await this._call('', {\n          type: BtpConstants.TYPE_MESSAGE,\n          requestId: await _requestId(),\n          data: { protocolData }\n        })\n        this.emit('_connect')\n      })\n\n      this._ws.on('message', this._handleIncomingWsMessage.bind(this, this._ws))\n\n      // CAUTION: Do not delete the following two lines, they have the side-effect\n      // of removing the 'user@pass:' part from parsedBtpUri.toString()!\n      parsedBtpUri.username = ''\n      parsedBtpUri.password = ''\n      const wsUri = parsedBtpUri.toString().substring('btp+'.length)\n\n      await this._ws.open(wsUri)\n    }\n\n    await new Promise((resolve, reject) => {\n      this.once('_connect', resolve)\n      this.once('disconnect', () =>\n        void reject(new Error('connection aborted')))\n    })\n\n    if (this._connect) {\n      await this._connect()\n    }\n\n    this._connected = true\n    this.emit('connect')\n  }\n\n  async _closeIncomingSocket (socket: WebSocket) {\n    socket.removeAllListeners()\n    socket.once('message', async (data: WebSocket.Data) => {\n      try {\n        const authPacket = BtpPacket.deserialize(data)\n        socket.send(BtpPacket.serializeError({\n          code: 'F00',\n          name: 'NotAcceptedError',\n          data: 'This connection has been ended because the user has opened a new connection',\n          triggeredAt: new Date().toISOString()\n        }, authPacket.requestId, []))\n      } catch (e) {\n        debug('error responding on closed socket', e)\n      }\n      socket.close()\n    })\n  }\n\n  async disconnect () {\n    this.emit('disconnect')\n    if (this._disconnect) {\n      await this._disconnect()\n    }\n\n    if (this._ws) this._ws.close()\n    if (this._incomingWs) {\n      this._incomingWs.close()\n      this._incomingWs = undefined\n    }\n    if (this._wss) this._wss.close()\n  }\n\n  isConnected () {\n    return this._connected\n  }\n\n  async _handleIncomingWsMessage (ws: WebSocket, binaryMessage: WebSocket.Data) {\n    let btpPacket: BtpPacket\n    try {\n      btpPacket = BtpPacket.deserialize(binaryMessage)\n    } catch (err) {\n      debug('deserialization error:', err)\n      ws.close()\n      return\n    }\n\n    debug(`processing btp packet ${JSON.stringify(btpPacket)}`)\n    try {\n      await this._handleIncomingBtpPacket('', btpPacket)\n    } catch (err) {\n      debug(`Error processing BTP packet of type ${btpPacket.type}: `, err)\n      const error = jsErrorToBtpError(err)\n      const requestId = btpPacket.requestId\n      const { code, name, triggeredAt, data } = error\n\n      await this._handleOutgoingBtpPacket('', {\n        type: BtpConstants.TYPE_ERROR,\n        requestId,\n        data: {\n          code,\n          name,\n          triggeredAt,\n          data,\n          protocolData: []\n        }\n      })\n    }\n  }\n\n  async sendData (buffer: Buffer) {\n    const response = await this._call('', {\n      type: BtpPacket.TYPE_MESSAGE,\n      requestId: await _requestId(),\n      data: { protocolData: [{\n        protocolName: 'ilp',\n        contentType: BtpPacket.MIME_APPLICATION_OCTET_STREAM,\n        data: buffer\n      }] }\n    })\n\n    const ilpResponse = response.protocolData\n      .filter(p => p.protocolName === 'ilp')[0]\n\n    return ilpResponse\n      ? ilpResponse.data\n      : Buffer.alloc(0)\n  }\n\n  async sendMoney () {\n    // With no underlying ledger, sendMoney is a no-op\n  }\n\n  // don't throw errors even if the event handler throws\n  // this is especially important in plugins because\n  // errors can prevent the balance from being updated correctly\n  _safeEmit () {\n    try {\n      this.emit.apply(this, arguments)\n    } catch (err) {\n      const errInfo = (typeof err === 'object' && err.stack) ? err.stack : String(err)\n      debug('error in handler for event', arguments, errInfo)\n    }\n  }\n\n  registerDataHandler (handler: DataHandler) {\n    if (this._dataHandler) {\n      throw new Error('requestHandler is already registered')\n    }\n\n    if (typeof handler !== 'function') {\n      throw new Error('requestHandler must be a function')\n    }\n\n    debug('registering data handler')\n    this._dataHandler = handler\n  }\n\n  deregisterDataHandler () {\n    this._dataHandler = undefined\n  }\n\n  registerMoneyHandler (handler: MoneyHandler) {\n    if (this._moneyHandler) {\n      throw new Error('requestHandler is already registered')\n    }\n\n    if (typeof handler !== 'function') {\n      throw new Error('requestHandler must be a function')\n    }\n\n    debug('registering money handler')\n    this._moneyHandler = handler\n  }\n\n  deregisterMoneyHandler () {\n    this._moneyHandler = undefined\n  }\n\n  protocolDataToIlpAndCustom (packet: BtpPacketData) {\n    return protocolDataToIlpAndCustom(packet)\n  }\n\n  ilpAndCustomToProtocolData (obj: { ilp?: Buffer, custom?: Object , protocolMap?: Map<string, Buffer | string | Object> }) {\n    return ilpAndCustomToProtocolData(obj)\n  }\n\n  protected async _call (to: string, btpPacket: BtpPacket): Promise<BtpPacketData> {\n    const requestId = btpPacket.requestId\n\n    let callback: Listener\n    let timer: NodeJS.Timer\n    const response = new Promise<BtpPacketData>((resolve, reject) => {\n      callback = (type: number, data: BtpPacketData) => {\n        switch (type) {\n          case BtpPacket.TYPE_RESPONSE:\n            resolve(data)\n            clearTimeout(timer)\n            break\n\n          case BtpPacket.TYPE_ERROR:\n            reject(new Error(JSON.stringify(data)))\n            clearTimeout(timer)\n            break\n\n          default:\n            throw new Error('Unknown BTP packet type: ' + type)\n        }\n      }\n      this.once('__callback_' + requestId, callback)\n    })\n\n    await this._handleOutgoingBtpPacket(to, btpPacket)\n\n    const timeout = new Promise<BtpPacketData>((resolve, reject) => {\n      timer = setTimeout(() => {\n        this.removeListener('__callback_' + requestId, callback)\n        reject(new Error(requestId + ' timed out'))\n      }, DEFAULT_TIMEOUT)\n    })\n\n    return Promise.race([\n      response,\n      timeout\n    ])\n  }\n\n  protected async _handleIncomingBtpPacket (from: string, btpPacket: BtpPacket) {\n    const { type, requestId, data } = btpPacket\n    const typeString = BtpPacket.typeToString(type)\n\n    debug(`received BTP packet (${typeString}, RequestId: ${requestId}): ${JSON.stringify(data)}`)\n    let result: Array<BtpSubProtocol>\n    switch (type) {\n      case BtpPacket.TYPE_RESPONSE:\n      case BtpPacket.TYPE_ERROR:\n        this.emit('__callback_' + requestId, type, data)\n        return\n      case BtpPacket.TYPE_PREPARE:\n      case BtpPacket.TYPE_FULFILL:\n      case BtpPacket.TYPE_REJECT:\n        throw new Error('Unsupported BTP packet')\n\n      case BtpPacket.TYPE_TRANSFER:\n        result = await this._handleMoney(from, btpPacket)\n        break\n\n      case BtpPacket.TYPE_MESSAGE:\n        result = await this._handleData(from, btpPacket)\n        break\n\n      default:\n        throw new Error('Unknown BTP packet type')\n    }\n\n    debug(`replying to request ${requestId} with ${JSON.stringify(result)}`)\n    await this._handleOutgoingBtpPacket(from, {\n      type: BtpPacket.TYPE_RESPONSE,\n      requestId,\n      data: { protocolData: result || [] }\n    })\n  }\n\n  protected async _handleData (from: string, btpPacket: BtpPacket): Promise<Array<BtpSubProtocol>> {\n    const { requestId, data } = btpPacket\n    const { ilp, protocolMap } = protocolDataToIlpAndCustom(data)\n\n    if (!this._dataHandler) {\n      throw new Error('no request handler registered')\n    }\n\n    const response = await this._dataHandler(ilp)\n    return ilpAndCustomToProtocolData({ ilp: response })\n  }\n\n  protected async _handleMoney (from: string, btpPacket: BtpPacket): Promise<Array<BtpSubProtocol>> {\n    throw new Error('No sendMoney functionality is included in this module')\n  }\n\n  protected async _handleOutgoingBtpPacket (to: string, btpPacket: BtpPacket) {\n    const ws = this._ws || this._incomingWs\n\n    try {\n      await new Promise((resolve) => ws!.send(BtpPacket.serialize(btpPacket), resolve))\n    } catch (e) {\n      debug('unable to send btp message to client: ' + e.message, 'btp packet:', JSON.stringify(btpPacket))\n    }\n  }\n}\n\nexport async function _requestId (): Promise<number> {\n  return new Promise<number>((resolve, reject) => {\n    crypto.randomBytes(4, (err, buf) => {\n      if (err) reject(err)\n      resolve(buf.readUInt32BE(0))\n    })\n  })\n}\n"]}