{"version":3,"file":"protocol-data-converter.js","sourceRoot":"","sources":["protocol-data-converter.ts"],"names":[],"mappings":"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","sourcesContent":["import { BtpSubProtocol, BtpPacket } from '.'\nconst Btp = require('btp-packet')\nconst base64url = require('base64url')\n\nexport function protocolDataToIlpAndCustom (data: { protocolData: Array<BtpSubProtocol> }) {\n  const protocolMap = {}\n  const { protocolData } = data\n\n  for (const protocol of protocolData) {\n    const name = protocol.protocolName\n\n    if (protocol.contentType === Btp.MIME_TEXT_PLAIN_UTF8) {\n      protocolMap[name] = protocol.data.toString('utf8')\n    } else if (protocol.contentType === Btp.MIME_APPLICATION_JSON) {\n      protocolMap[name] = JSON.parse(protocol.data.toString('utf8'))\n    } else {\n      protocolMap[name] = protocol.data\n    }\n  }\n\n  return {\n    protocolMap,\n    ilp: protocolMap['ilp'],\n    custom: protocolMap['custom']\n  }\n}\n\nexport function ilpAndCustomToProtocolData (data: { ilp?: Buffer, custom?: Object , protocolMap?: Map<string, Buffer | string | Object> }): Array<BtpSubProtocol> {\n  const protocolData = []\n  const {ilp, custom, protocolMap} = data\n\n  // ILP is always the primary protocol when it's specified\n  if (ilp) {\n    protocolData.push({\n      protocolName: 'ilp',\n      contentType: Btp.MIME_APPLICATION_OCTET_STREAM,\n      //TODO JS originally had a Buffer.from(ilp, 'base64')?\n      data: ilp\n    })\n  }\n\n  // explicitly specified sub-protocols come next\n  if (protocolMap) {\n    const sideProtocols = Object.keys(protocolMap)\n    for (const protocol of sideProtocols) {\n      if (Buffer.isBuffer(protocolMap[protocol])) {\n        protocolData.push({\n          protocolName: protocol,\n          contentType: Btp.MIME_APPLICATION_OCTET_STREAM,\n          data: protocolMap[protocol]\n        })\n      } else if (typeof protocolMap[protocol] === 'string') {\n        protocolData.push({\n          protocolName: protocol,\n          contentType: Btp.MIME_TEXT_PLAIN_UTF8,\n          data: Buffer.from(protocolMap[protocol])\n        })\n      } else {\n        protocolData.push({\n          protocolName: protocol,\n          contentType: Btp.MIME_APPLICATION_JSON,\n          data: Buffer.from(JSON.stringify(protocolMap[protocol]))\n        })\n      }\n    }\n  }\n\n  // the \"custom\" side protocol is always secondary unless its the only sub\n  // protocol.\n  if (custom) {\n    protocolData.push({\n      protocolName: 'custom',\n      contentType: Btp.MIME_APPLICATION_JSON,\n      data: Buffer.from(JSON.stringify(custom))\n    })\n  }\n\n  return protocolData\n}\n"]}